// Mocks generated by Mockito 5.4.5 from annotations
// in holodex_notifier/test/application/state/channel_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:holodex_notifier/domain/interfaces/logging_service.dart' as _i8;
import 'package:holodex_notifier/domain/interfaces/settings_service.dart'
    as _i4;
import 'package:holodex_notifier/domain/models/app_config.dart' as _i2;
import 'package:holodex_notifier/domain/models/channel_subscription_setting.dart'
    as _i6;
import 'package:holodex_notifier/domain/models/notification_format_config.dart'
    as _i3;
import 'package:holodex_notifier/domain/models/notification_instruction.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAppConfig_1 extends _i1.SmartFake implements _i2.AppConfig {
  _FakeAppConfig_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNotificationFormatConfig_2 extends _i1.SmartFake
    implements _i3.NotificationFormatConfig {
  _FakeNotificationFormatConfig_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ISettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockISettingsService extends _i1.Mock implements _i4.ISettingsService {
  MockISettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<Duration> getPollFrequency() =>
      (super.noSuchMethod(
            Invocation.method(#getPollFrequency, []),
            returnValue: _i5.Future<Duration>.value(
              _FakeDuration_0(this, Invocation.method(#getPollFrequency, [])),
            ),
          )
          as _i5.Future<Duration>);

  @override
  _i5.Future<void> setPollFrequency(Duration? frequency) =>
      (super.noSuchMethod(
            Invocation.method(#setPollFrequency, [frequency]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> getNotificationGrouping() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationGrouping, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> setNotificationGrouping(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setNotificationGrouping, [enabled]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> getDelayNewMedia() =>
      (super.noSuchMethod(
            Invocation.method(#getDelayNewMedia, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> setDelayNewMedia(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setDelayNewMedia, [enabled]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<Duration> getReminderLeadTime() =>
      (super.noSuchMethod(
            Invocation.method(#getReminderLeadTime, []),
            returnValue: _i5.Future<Duration>.value(
              _FakeDuration_0(
                this,
                Invocation.method(#getReminderLeadTime, []),
              ),
            ),
          )
          as _i5.Future<Duration>);

  @override
  _i5.Future<void> setReminderLeadTime(Duration? leadTime) =>
      (super.noSuchMethod(
            Invocation.method(#setReminderLeadTime, [leadTime]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<DateTime?> getLastPollTime() =>
      (super.noSuchMethod(
            Invocation.method(#getLastPollTime, []),
            returnValue: _i5.Future<DateTime?>.value(),
          )
          as _i5.Future<DateTime?>);

  @override
  _i5.Future<void> setLastPollTime(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastPollTime, [time]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> getApiKey() =>
      (super.noSuchMethod(
            Invocation.method(#getApiKey, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<void> setApiKey(String? apiKey) =>
      (super.noSuchMethod(
            Invocation.method(#setApiKey, [apiKey]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.ChannelSubscriptionSetting>> getChannelSubscriptions() =>
      (super.noSuchMethod(
            Invocation.method(#getChannelSubscriptions, []),
            returnValue: _i5.Future<List<_i6.ChannelSubscriptionSetting>>.value(
              <_i6.ChannelSubscriptionSetting>[],
            ),
          )
          as _i5.Future<List<_i6.ChannelSubscriptionSetting>>);

  @override
  _i5.Future<void> saveChannelSubscriptions(
    List<_i6.ChannelSubscriptionSetting>? channels,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveChannelSubscriptions, [channels]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateChannelAvatar(
    String? channelId,
    String? newAvatarUrl,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateChannelAvatar, [channelId, newAvatarUrl]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> getMainServicesReady() =>
      (super.noSuchMethod(
            Invocation.method(#getMainServicesReady, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> setMainServicesReady(bool? ready) =>
      (super.noSuchMethod(
            Invocation.method(#setMainServicesReady, [ready]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> getIsFirstLaunch() =>
      (super.noSuchMethod(
            Invocation.method(#getIsFirstLaunch, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> setIsFirstLaunch(bool? isFirst) =>
      (super.noSuchMethod(
            Invocation.method(#setIsFirstLaunch, [isFirst]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.AppConfig> exportConfiguration() =>
      (super.noSuchMethod(
            Invocation.method(#exportConfiguration, []),
            returnValue: _i5.Future<_i2.AppConfig>.value(
              _FakeAppConfig_1(
                this,
                Invocation.method(#exportConfiguration, []),
              ),
            ),
          )
          as _i5.Future<_i2.AppConfig>);

  @override
  _i5.Future<bool> importConfiguration(_i2.AppConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#importConfiguration, [config]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i3.NotificationFormatConfig> getNotificationFormatConfig() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationFormatConfig, []),
            returnValue: _i5.Future<_i3.NotificationFormatConfig>.value(
              _FakeNotificationFormatConfig_2(
                this,
                Invocation.method(#getNotificationFormatConfig, []),
              ),
            ),
          )
          as _i5.Future<_i3.NotificationFormatConfig>);

  @override
  _i5.Future<void> setNotificationFormatConfig(
    _i3.NotificationFormatConfig? config,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setNotificationFormatConfig, [config]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<Set<_i7.NotificationEventType>> getScheduledFilterTypes() =>
      (super.noSuchMethod(
            Invocation.method(#getScheduledFilterTypes, []),
            returnValue: _i5.Future<Set<_i7.NotificationEventType>>.value(
              <_i7.NotificationEventType>{},
            ),
          )
          as _i5.Future<Set<_i7.NotificationEventType>>);

  @override
  _i5.Future<void> setScheduledFilterTypes(
    Set<_i7.NotificationEventType>? types,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setScheduledFilterTypes, [types]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  Set<_i7.NotificationEventType> getScheduledFilterTypesSync() =>
      (super.noSuchMethod(
            Invocation.method(#getScheduledFilterTypesSync, []),
            returnValue: <_i7.NotificationEventType>{},
          )
          as Set<_i7.NotificationEventType>);
}

/// A class which mocks [ILoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockILoggingService extends _i1.Mock implements _i8.ILoggingService {
  MockILoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void trace(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#trace, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void debug(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#info, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#fatal, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );
}
